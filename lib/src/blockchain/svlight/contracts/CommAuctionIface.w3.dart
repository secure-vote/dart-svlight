// autogenerated - your edits will be overwritten!
import 'dart:io';
import 'dart:typed_data';
import 'package:dartz/dartz.dart';
import 'package:web3dart/web3dart.dart';
import 'package:web3_contract_generator/helpers.dart';

const COMMAUCTIONIFACE_ABI =
    """[{"constant":false,"inputs":[{"name":"democHash","type":"bytes32"}],"name":"noteBallotDeployed","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"democHash","type":"bytes32"}],"name":"getNextPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newSC","type":"address"}],"name":"upgradeMe","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]""";
final EthereumAddress _zeroAddr =
    EthereumAddress(Uint8List(20)..fillRange(0, 20, 0));
EthereumAddress _addrOrDefault(EthereumAddress addr) => addr ?? _zeroAddr;

class CommAuctionIfaceContract {
  final ContractAbi $abi =
      ContractAbi.fromJson(COMMAUCTIONIFACE_ABI, "CommAuctionIface");
  EthereumAddress $addr;
  DeployedContract $contract;
  Web3Client $client;
  CommAuctionIfaceContract(String address, Web3Client this.$client) {
    $addr = EthereumAddress.fromHex(address);
    $contract = DeployedContract($abi, $addr);
  }

  Future<String> noteBallotDeployed(
      Uint8List democHash, Wallet wallet, TransactionNotPayable tx) async {
    var _f = $contract.function("noteBallotDeployed");
    var _params = _f.encodeCall(<dynamic>[democHash]);
    var finalized = tx.finalize(
        data: _params,
        from: await wallet.privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(wallet.privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<BigInt> getNextPrice(Uint8List democHash,
      {EthereumAddress from}) async {
    var _f = $contract.function("getNextPrice");
    var _params = <dynamic>[democHash];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as BigInt;
  }

  Future<String> upgradeMe(
      EthereumAddress newSC, Wallet wallet, TransactionNotPayable tx) async {
    var _f = $contract.function("upgradeMe");
    var _params = _f.encodeCall(<dynamic>[newSC]);
    var finalized = tx.finalize(
        data: _params,
        from: await wallet.privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(wallet.privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }
}
