// autogenerated - your edits will be overwritten!
import 'dart:typed_data';
import 'package:dartz/dartz.dart';
import 'package:web3dart/web3dart.dart';
import 'package:web3_contract/web3_contract.dart';

const SVPAYMENTS_ABI =
    '''[{"constant":false,"inputs":[{"name":"democHash","type":"bytes32"}],"name":"payForDemocracy","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"democHash","type":"bytes32"},{"name":"additionalSeconds","type":"uint256"},{"name":"ref","type":"bytes32"}],"name":"giveTimeToDemoc","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"setBasicCentsPricePer30Days","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getVersion","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[],"name":"doLockdown","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"democHash","type":"bytes32"}],"name":"getDenyPremium","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"setOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"emergencySetOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"minorEditsAddr","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"token","type":"address"}],"name":"reclaimToken","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"c","type":"uint256"}],"name":"centsToWei","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"a","type":"address"}],"name":"hasPermissions","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"n","type":"uint256"}],"name":"getAdminLog","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"a","type":"address"}],"name":"isAdmin","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"democHash","type":"bytes32"},{"name":"isPremiumDenied","type":"bool"}],"name":"setDenyPremium","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"democHash","type":"bytes32"}],"name":"accountInGoodStanding","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"a","type":"address"}],"name":"setMinorEditsAddr","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"currAdminEpoch","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"democHash","type":"bytes32"}],"name":"downgradeToBasic","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getAdminLogN","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"incAdminEpoch","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"a","type":"address"},{"name":"_givePerms","type":"bool"}],"name":"setAdmin","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"payoutAll","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"newSC","type":"address"}],"name":"upgradeMe","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getBasicBallotsPer30Days","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"adminsDisabledForever","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getMinWeiForDInit","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"e","type":"address"},{"name":"_editPerms","type":"bool"}],"name":"setPermissions","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"newPayTo","type":"address"}],"name":"setPayTo","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"democHash","type":"bytes32"}],"name":"getFreeExtension","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getPaymentLogN","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"w","type":"uint256"}],"name":"weiToCents","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"emergencyAdmin","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"democHash","type":"bytes32"}],"name":"getPremiumStatus","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getPremiumMultiplier","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"adminLockdown","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getWeiPerCent","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newAdmin","type":"address"}],"name":"upgradeMeAdmin","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"setBasicBallotsPer30Days","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getBasicExtraBallotFeeWei","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"oldSC","type":"address"},{"name":"newSC","type":"address"}],"name":"upgradePermissionedSC","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"democHash","type":"bytes32"},{"name":"hasFreeExt","type":"bool"}],"name":"setFreeExtension","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"democHash","type":"bytes32"}],"name":"upgradeToPremium","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"wpc","type":"uint256"}],"name":"setWeiPerCent","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"democHash","type":"bytes32"}],"name":"getAccount","outputs":[{"name":"isPremium","type":"bool"},{"name":"lastPaymentTs","type":"uint256"},{"name":"paidUpTill","type":"uint256"},{"name":"hasFreeExtension","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getUsdEthExchangeRate","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"m","type":"uint8"}],"name":"setPremiumMultiplier","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getBasicCentsPricePer30Days","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getPremiumCentsPricePer30Days","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"democHash","type":"bytes32"}],"name":"getSecondsRemaining","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getPayTo","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"setMinWeiForDInit","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"amount","type":"uint256"}],"name":"weiBuysHowManySeconds","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"n","type":"uint256"}],"name":"getPaymentLog","outputs":[{"name":"_external","type":"bool"},{"name":"_democHash","type":"bytes32"},{"name":"_seconds","type":"uint256"},{"name":"_ethValue","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"democHash","type":"bytes32"}],"name":"doFreeExtension","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"_emergencyAdmin","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"payTo","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"PayoutAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"editAddr","type":"address"}],"name":"PermissionError","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"editAddr","type":"address"}],"name":"PermissionGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"editAddr","type":"address"}],"name":"PermissionRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"oldSC","type":"address"},{"indexed":false,"name":"newSC","type":"address"}],"name":"PermissionsUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"oldSC","type":"address"},{"indexed":false,"name":"newSC","type":"address"}],"name":"SelfUpgrade","type":"event"},{"anonymous":false,"inputs":[],"name":"AdminLockdown","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"newAdmin","type":"address"}],"name":"AdminAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"oldAdmin","type":"address"}],"name":"AdminRemoved","type":"event"},{"anonymous":false,"inputs":[],"name":"AdminEpochInc","type":"event"},{"anonymous":false,"inputs":[],"name":"AdminDisabledForever","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"newOwner","type":"address"}],"name":"OwnerChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"democHash","type":"bytes32"}],"name":"UpgradedToPremium","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"democHash","type":"bytes32"},{"indexed":false,"name":"additionalSeconds","type":"uint256"},{"indexed":false,"name":"ref","type":"bytes32"}],"name":"GrantedAccountTime","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"democHash","type":"bytes32"},{"indexed":false,"name":"additionalSeconds","type":"uint256"}],"name":"AccountPayment","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"amount","type":"uint256"}],"name":"SetCommunityBallotFee","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"amount","type":"uint256"}],"name":"SetBasicCentsPricePer30Days","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"multiplier","type":"uint8"}],"name":"SetPremiumMultiplier","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"democHash","type":"bytes32"}],"name":"DowngradeToBasic","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"democHash","type":"bytes32"}],"name":"UpgradeToPremium","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"weiPerCent","type":"uint256"}],"name":"SetExchangeRate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"democHash","type":"bytes32"}],"name":"FreeExtension","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"amount","type":"uint256"}],"name":"SetBallotsPer30Days","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"democHash","type":"bytes32"},{"indexed":false,"name":"hasFreeExt","type":"bool"}],"name":"SetFreeExtension","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"democHash","type":"bytes32"},{"indexed":false,"name":"isPremiumDenied","type":"bool"}],"name":"SetDenyPremium","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"payTo","type":"address"}],"name":"SetPayTo","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"minorEditsAddr","type":"address"}],"name":"SetMinorEditsAddr","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"amount","type":"uint256"}],"name":"SetMinWeiForDInit","type":"event"}]''';
final EthereumAddress _zeroAddr =
    EthereumAddress(Uint8List(20)..fillRange(0, 20, 0));
EthereumAddress _addrOrDefault(EthereumAddress addr) => addr ?? _zeroAddr;

class SVPaymentsContract {
  DeployedContract $contract;
  EthereumAddress get $addr => $contract.address;
  ContractAbi get $abi => $contract.abi;
  Web3Client $client;
  SVPaymentsContract(String address, this.$client)
      : $contract = DeployedContract(
            ContractAbi.fromJson(SVPAYMENTS_ABI, 'SVPayments'),
            EthereumAddress.fromHex(address));

  Future<String> payForDemocracy(Uint8List democHash, Credentials privateKey,
      TransactionPayable tx) async {
    var _f = $contract.function('payForDemocracy');
    var _params = _f.encodeCall(<dynamic>[democHash]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> giveTimeToDemoc(Uint8List democHash, BigInt additionalSeconds,
      Uint8List ref, Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $contract.function('giveTimeToDemoc');
    var _params = _f.encodeCall(<dynamic>[democHash, additionalSeconds, ref]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> setBasicCentsPricePer30Days(
      BigInt amount, Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $contract.function('setBasicCentsPricePer30Days');
    var _params = _f.encodeCall(<dynamic>[amount]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<BigInt> getVersion({EthereumAddress from}) async {
    var _f = $contract.function('getVersion');
    var _params = <dynamic>[];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as BigInt;
  }

  Future<String> doLockdown(
      Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $contract.function('doLockdown');
    var _params = _f.encodeCall(<dynamic>[]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<bool> getDenyPremium(Uint8List democHash,
      {EthereumAddress from}) async {
    var _f = $contract.function('getDenyPremium');
    var _params = <dynamic>[democHash];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as bool;
  }

  Future<String> setOwner(EthereumAddress newOwner, Credentials privateKey,
      TransactionNotPayable tx) async {
    var _f = $contract.function('setOwner');
    var _params = _f.encodeCall(<dynamic>[newOwner]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> emergencySetOwner(EthereumAddress newOwner,
      Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $contract.function('emergencySetOwner');
    var _params = _f.encodeCall(<dynamic>[newOwner]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<EthereumAddress> minorEditsAddr({EthereumAddress from}) async {
    var _f = $contract.function('minorEditsAddr');
    var _params = <dynamic>[];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as EthereumAddress;
  }

  Future<String> reclaimToken(EthereumAddress token, Credentials privateKey,
      TransactionNotPayable tx) async {
    var _f = $contract.function('reclaimToken');
    var _params = _f.encodeCall(<dynamic>[token]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<BigInt> centsToWei(BigInt c, {EthereumAddress from}) async {
    var _f = $contract.function('centsToWei');
    var _params = <dynamic>[c];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as BigInt;
  }

  Future<bool> hasPermissions(EthereumAddress a, {EthereumAddress from}) async {
    var _f = $contract.function('hasPermissions');
    var _params = <dynamic>[a];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as bool;
  }

  Future<EthereumAddress> getAdminLog(BigInt n, {EthereumAddress from}) async {
    var _f = $contract.function('getAdminLog');
    var _params = <dynamic>[n];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as EthereumAddress;
  }

  Future<bool> isAdmin(EthereumAddress a, {EthereumAddress from}) async {
    var _f = $contract.function('isAdmin');
    var _params = <dynamic>[a];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as bool;
  }

  Future<String> setDenyPremium(Uint8List democHash, bool isPremiumDenied,
      Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $contract.function('setDenyPremium');
    var _params = _f.encodeCall(<dynamic>[democHash, isPremiumDenied]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<bool> accountInGoodStanding(Uint8List democHash,
      {EthereumAddress from}) async {
    var _f = $contract.function('accountInGoodStanding');
    var _params = <dynamic>[democHash];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as bool;
  }

  Future<String> setMinorEditsAddr(EthereumAddress a, Credentials privateKey,
      TransactionNotPayable tx) async {
    var _f = $contract.function('setMinorEditsAddr');
    var _params = _f.encodeCall(<dynamic>[a]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<BigInt> currAdminEpoch({EthereumAddress from}) async {
    var _f = $contract.function('currAdminEpoch');
    var _params = <dynamic>[];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as BigInt;
  }

  Future<String> downgradeToBasic(Uint8List democHash, Credentials privateKey,
      TransactionNotPayable tx) async {
    var _f = $contract.function('downgradeToBasic');
    var _params = _f.encodeCall(<dynamic>[democHash]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<BigInt> getAdminLogN({EthereumAddress from}) async {
    var _f = $contract.function('getAdminLogN');
    var _params = <dynamic>[];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as BigInt;
  }

  Future<String> incAdminEpoch(
      Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $contract.function('incAdminEpoch');
    var _params = _f.encodeCall(<dynamic>[]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> setAdmin(EthereumAddress a, bool _givePerms,
      Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $contract.function('setAdmin');
    var _params = _f.encodeCall(<dynamic>[a, _givePerms]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> payoutAll(
      Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $contract.function('payoutAll');
    var _params = _f.encodeCall(<dynamic>[]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> upgradeMe(EthereumAddress newSC, Credentials privateKey,
      TransactionNotPayable tx) async {
    var _f = $contract.function('upgradeMe');
    var _params = _f.encodeCall(<dynamic>[newSC]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<BigInt> getBasicBallotsPer30Days({EthereumAddress from}) async {
    var _f = $contract.function('getBasicBallotsPer30Days');
    var _params = <dynamic>[];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as BigInt;
  }

  Future<bool> adminsDisabledForever({EthereumAddress from}) async {
    var _f = $contract.function('adminsDisabledForever');
    var _params = <dynamic>[];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as bool;
  }

  Future<BigInt> getMinWeiForDInit({EthereumAddress from}) async {
    var _f = $contract.function('getMinWeiForDInit');
    var _params = <dynamic>[];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as BigInt;
  }

  Future<String> setPermissions(EthereumAddress e, bool _editPerms,
      Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $contract.function('setPermissions');
    var _params = _f.encodeCall(<dynamic>[e, _editPerms]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> setPayTo(EthereumAddress newPayTo, Credentials privateKey,
      TransactionNotPayable tx) async {
    var _f = $contract.function('setPayTo');
    var _params = _f.encodeCall(<dynamic>[newPayTo]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<bool> getFreeExtension(Uint8List democHash,
      {EthereumAddress from}) async {
    var _f = $contract.function('getFreeExtension');
    var _params = <dynamic>[democHash];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as bool;
  }

  Future<BigInt> getPaymentLogN({EthereumAddress from}) async {
    var _f = $contract.function('getPaymentLogN');
    var _params = <dynamic>[];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as BigInt;
  }

  Future<BigInt> weiToCents(BigInt w, {EthereumAddress from}) async {
    var _f = $contract.function('weiToCents');
    var _params = <dynamic>[w];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as BigInt;
  }

  Future<EthereumAddress> emergencyAdmin({EthereumAddress from}) async {
    var _f = $contract.function('emergencyAdmin');
    var _params = <dynamic>[];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as EthereumAddress;
  }

  Future<bool> getPremiumStatus(Uint8List democHash,
      {EthereumAddress from}) async {
    var _f = $contract.function('getPremiumStatus');
    var _params = <dynamic>[democHash];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as bool;
  }

  Future<BigInt> getPremiumMultiplier({EthereumAddress from}) async {
    var _f = $contract.function('getPremiumMultiplier');
    var _params = <dynamic>[];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as BigInt;
  }

  Future<bool> adminLockdown({EthereumAddress from}) async {
    var _f = $contract.function('adminLockdown');
    var _params = <dynamic>[];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as bool;
  }

  Future<BigInt> getWeiPerCent({EthereumAddress from}) async {
    var _f = $contract.function('getWeiPerCent');
    var _params = <dynamic>[];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as BigInt;
  }

  Future<String> upgradeMeAdmin(EthereumAddress newAdmin,
      Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $contract.function('upgradeMeAdmin');
    var _params = _f.encodeCall(<dynamic>[newAdmin]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<EthereumAddress> owner({EthereumAddress from}) async {
    var _f = $contract.function('owner');
    var _params = <dynamic>[];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as EthereumAddress;
  }

  Future<String> setBasicBallotsPer30Days(
      BigInt amount, Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $contract.function('setBasicBallotsPer30Days');
    var _params = _f.encodeCall(<dynamic>[amount]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<BigInt> getBasicExtraBallotFeeWei({EthereumAddress from}) async {
    var _f = $contract.function('getBasicExtraBallotFeeWei');
    var _params = <dynamic>[];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as BigInt;
  }

  Future<String> upgradePermissionedSC(
      EthereumAddress oldSC,
      EthereumAddress newSC,
      Credentials privateKey,
      TransactionNotPayable tx) async {
    var _f = $contract.function('upgradePermissionedSC');
    var _params = _f.encodeCall(<dynamic>[oldSC, newSC]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> setFreeExtension(Uint8List democHash, bool hasFreeExt,
      Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $contract.function('setFreeExtension');
    var _params = _f.encodeCall(<dynamic>[democHash, hasFreeExt]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> upgradeToPremium(Uint8List democHash, Credentials privateKey,
      TransactionNotPayable tx) async {
    var _f = $contract.function('upgradeToPremium');
    var _params = _f.encodeCall(<dynamic>[democHash]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> setWeiPerCent(
      BigInt wpc, Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $contract.function('setWeiPerCent');
    var _params = _f.encodeCall(<dynamic>[wpc]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<Tuple4<bool, BigInt, BigInt, bool>> getAccount(Uint8List democHash,
      {EthereumAddress from}) async {
    var _f = $contract.function('getAccount');
    var _params = <dynamic>[democHash];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return Tuple4(result[0] as bool, result[1] as BigInt, result[2] as BigInt,
        result[3] as bool);
  }

  Future<BigInt> getUsdEthExchangeRate({EthereumAddress from}) async {
    var _f = $contract.function('getUsdEthExchangeRate');
    var _params = <dynamic>[];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as BigInt;
  }

  Future<String> setPremiumMultiplier(
      BigInt m, Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $contract.function('setPremiumMultiplier');
    var _params = _f.encodeCall(<dynamic>[m]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<BigInt> getBasicCentsPricePer30Days({EthereumAddress from}) async {
    var _f = $contract.function('getBasicCentsPricePer30Days');
    var _params = <dynamic>[];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as BigInt;
  }

  Future<BigInt> getPremiumCentsPricePer30Days({EthereumAddress from}) async {
    var _f = $contract.function('getPremiumCentsPricePer30Days');
    var _params = <dynamic>[];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as BigInt;
  }

  Future<BigInt> getSecondsRemaining(Uint8List democHash,
      {EthereumAddress from}) async {
    var _f = $contract.function('getSecondsRemaining');
    var _params = <dynamic>[democHash];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as BigInt;
  }

  Future<EthereumAddress> getPayTo({EthereumAddress from}) async {
    var _f = $contract.function('getPayTo');
    var _params = <dynamic>[];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as EthereumAddress;
  }

  Future<String> setMinWeiForDInit(
      BigInt amount, Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $contract.function('setMinWeiForDInit');
    var _params = _f.encodeCall(<dynamic>[amount]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<BigInt> weiBuysHowManySeconds(BigInt amount,
      {EthereumAddress from}) async {
    var _f = $contract.function('weiBuysHowManySeconds');
    var _params = <dynamic>[amount];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as BigInt;
  }

  Future<Tuple4<bool, Uint8List, BigInt, BigInt>> getPaymentLog(BigInt n,
      {EthereumAddress from}) async {
    var _f = $contract.function('getPaymentLog');
    var _params = <dynamic>[n];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return Tuple4(result[0] as bool, result[1] as Uint8List,
        result[2] as BigInt, result[3] as BigInt);
  }

  Future<String> doFreeExtension(Uint8List democHash, Credentials privateKey,
      TransactionNotPayable tx) async {
    var _f = $contract.function('doFreeExtension');
    var _params = _f.encodeCall(<dynamic>[democHash]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> $constructor(EthereumAddress _emergencyAdmin,
      Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $abi.functions.where((f) => f.name == '' && f.isConstructor).first;
    var _params = _f.encodeCall(<dynamic>[_emergencyAdmin]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> $fallback(
      Credentials privateKey, TransactionPayable tx) async {
    var _f = $abi.functions.where((f) => f.name == '' && f.isDefault).first;
    var _params = _f.encodeCall(<dynamic>[]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }
}
