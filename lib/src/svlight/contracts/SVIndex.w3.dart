// autogenerated - your edits will be overwritten!
import 'dart:typed_data';
import 'package:dartz/dartz.dart';
import 'package:web3dart/web3dart.dart';
import 'package:web3_contract/web3_contract.dart';

const SVINDEX_ABI =
    '''[{"constant":false,"inputs":[{"name":"democHash","type":"bytes32"},{"name":"catId","type":"uint256"}],"name":"dDeprecateCategory","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getVersion","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"bbFarmId","type":"uint8"}],"name":"getBBFarm","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"setOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"token","type":"address"}],"name":"reclaimToken","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"bbFarmId","type":"uint8"},{"name":"_bbFarm","type":"address"}],"name":"deprecateBBFarm","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"democHash","type":"bytes32"},{"name":"enabled","type":"bool"}],"name":"dSetCommunityBallotsEnabled","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"democHash","type":"bytes32"},{"name":"catName","type":"bytes32"},{"name":"hasParent","type":"bool"},{"name":"parent","type":"uint256"}],"name":"dAddCategory","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"democHash","type":"bytes32"},{"name":"specHash","type":"bytes32"},{"name":"extraData","type":"bytes32"},{"name":"packed","type":"uint256"}],"name":"dDeployBallot","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"nextSC","type":"address"}],"name":"doUpgrade","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"democHash","type":"bytes32"}],"name":"setDNoEditors","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"payoutAll","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"bbFarm","type":"address"}],"name":"addBBFarm","outputs":[{"name":"bbFarmId","type":"uint8"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getBackend","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ensOwnerPx","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"democHash","type":"bytes32"}],"name":"dDisableErc20OwnerClaim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"democHash","type":"bytes32"}],"name":"dDowngradeToBasic","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"democHash","type":"bytes32"},{"name":"key","type":"bytes"},{"name":"value","type":"bytes"}],"name":"dSetArbitraryData","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"democHash","type":"bytes32"}],"name":"dOwnerErc20Claim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"toSet","type":"bytes32"},{"name":"newSC","type":"address"}],"name":"setABackend","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getUpgradePointer","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"democHash","type":"bytes32"},{"name":"specHash","type":"bytes32"},{"name":"extraData","type":"bytes32"},{"name":"packedTimes","type":"uint128"}],"name":"dDeployCommunityBallot","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"getPayments","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"bbNamespace","type":"bytes4"}],"name":"getBBFarmID","outputs":[{"name":"bbFarmId","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"democHash","type":"bytes32"},{"name":"newOwner","type":"address"}],"name":"setDOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"democHash","type":"bytes32"},{"name":"ballotId","type":"uint256"},{"name":"packed","type":"uint256"}],"name":"dAddBallot","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"democHash","type":"bytes32"}],"name":"dUpgradeToPremium","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"defaultErc20","type":"address"},{"name":"disableErc20OwnerClaim","type":"bool"}],"name":"dInit","outputs":[{"name":"","type":"bytes32"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"getCommAuction","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"democHash","type":"bytes32"},{"name":"newErc20","type":"address"}],"name":"setDErc20","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"democHash","type":"bytes32"},{"name":"editor","type":"address"},{"name":"canEdit","type":"bool"}],"name":"setDEditor","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"_b","type":"address"},{"name":"_pay","type":"address"},{"name":"_ensOwnerPx","type":"address"},{"name":"_bbFarm0","type":"address"},{"name":"_commAuction","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"payTo","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"PayoutAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"newOwner","type":"address"}],"name":"OwnerChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"valAndRemainder","type":"uint256[2]"}],"name":"PaymentMade","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"bbFarmId","type":"uint8"}],"name":"AddedBBFarm","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"setWhat","type":"bytes32"},{"indexed":false,"name":"newSC","type":"address"}],"name":"SetBackend","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"bbFarmId","type":"uint8"}],"name":"DeprecatedBBFarm","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"democHash","type":"bytes32"},{"indexed":false,"name":"ballotId","type":"uint256"}],"name":"CommunityBallot","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"democHash","type":"bytes32"},{"indexed":false,"name":"ballotId","type":"uint256"},{"indexed":false,"name":"packed","type":"uint256"}],"name":"ManuallyAddedBallot","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"ballotId","type":"uint256"}],"name":"BallotCreatedWithID","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"namespace","type":"bytes4"}],"name":"BBFarmInit","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"democHash","type":"bytes32"}],"name":"NewDemoc","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"democHash","type":"bytes32"},{"indexed":false,"name":"erc20","type":"address"}],"name":"ManuallyAddedDemoc","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"democHash","type":"bytes32"},{"indexed":false,"name":"ballotN","type":"uint256"}],"name":"NewBallot","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"democHash","type":"bytes32"},{"indexed":false,"name":"owner","type":"address"}],"name":"DemocOwnerSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"democHash","type":"bytes32"},{"indexed":false,"name":"editor","type":"address"},{"indexed":false,"name":"canEdit","type":"bool"}],"name":"DemocEditorSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"democHash","type":"bytes32"}],"name":"DemocEditorsWiped","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"democHash","type":"bytes32"},{"indexed":false,"name":"erc20","type":"address"}],"name":"DemocErc20Set","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"democHash","type":"bytes32"},{"indexed":false,"name":"keyHash","type":"bytes32"}],"name":"DemocDataSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"democHash","type":"bytes32"},{"indexed":false,"name":"catId","type":"uint256"}],"name":"DemocCatAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"democHash","type":"bytes32"},{"indexed":false,"name":"catId","type":"uint256"}],"name":"DemocCatDeprecated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"democHash","type":"bytes32"},{"indexed":false,"name":"enabled","type":"bool"}],"name":"DemocCommunityBallotsEnabled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"democHash","type":"bytes32"}],"name":"DemocErc20OwnerClaimDisabled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"democHash","type":"bytes32"}],"name":"DemocClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"democHash","type":"bytes32"},{"indexed":false,"name":"newOwner","type":"address"}],"name":"EmergencyDemocOwner","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"democHash","type":"bytes32"}],"name":"UpgradedToPremium","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"democHash","type":"bytes32"},{"indexed":false,"name":"additionalSeconds","type":"uint256"},{"indexed":false,"name":"ref","type":"bytes32"}],"name":"GrantedAccountTime","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"democHash","type":"bytes32"},{"indexed":false,"name":"additionalSeconds","type":"uint256"}],"name":"AccountPayment","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"amount","type":"uint256"}],"name":"SetCommunityBallotFee","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"amount","type":"uint256"}],"name":"SetBasicCentsPricePer30Days","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"multiplier","type":"uint8"}],"name":"SetPremiumMultiplier","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"democHash","type":"bytes32"}],"name":"DowngradeToBasic","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"democHash","type":"bytes32"}],"name":"UpgradeToPremium","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"weiPerCent","type":"uint256"}],"name":"SetExchangeRate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"democHash","type":"bytes32"}],"name":"FreeExtension","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"amount","type":"uint256"}],"name":"SetBallotsPer30Days","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"democHash","type":"bytes32"},{"indexed":false,"name":"hasFreeExt","type":"bool"}],"name":"SetFreeExtension","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"democHash","type":"bytes32"},{"indexed":false,"name":"isPremiumDenied","type":"bool"}],"name":"SetDenyPremium","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"payTo","type":"address"}],"name":"SetPayTo","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"minorEditsAddr","type":"address"}],"name":"SetMinorEditsAddr","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"amount","type":"uint256"}],"name":"SetMinWeiForDInit","type":"event"}]''';
final EthereumAddress _zeroAddr =
    EthereumAddress(Uint8List(20)..fillRange(0, 20, 0));
EthereumAddress _addrOrDefault(EthereumAddress addr) => addr ?? _zeroAddr;

class SVIndexContract {
  DeployedContract $contract;
  EthereumAddress get $addr => $contract.address;
  ContractAbi get $abi => $contract.abi;
  Web3Client $client;
  SVIndexContract(String address, this.$client)
      : $contract = DeployedContract(
            ContractAbi.fromJson(SVINDEX_ABI, 'SVIndex'),
            EthereumAddress.fromHex(address));

  Future<String> dDeprecateCategory(Uint8List democHash, BigInt catId,
      Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $contract.function('dDeprecateCategory');
    var _params = _f.encodeCall(<dynamic>[democHash, catId]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<BigInt> getVersion({EthereumAddress from}) async {
    var _f = $contract.function('getVersion');
    var _params = <dynamic>[];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as BigInt;
  }

  Future<EthereumAddress> getBBFarm(BigInt bbFarmId,
      {EthereumAddress from}) async {
    var _f = $contract.function('getBBFarm');
    var _params = <dynamic>[bbFarmId];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as EthereumAddress;
  }

  Future<String> setOwner(EthereumAddress newOwner, Credentials privateKey,
      TransactionNotPayable tx) async {
    var _f = $contract.function('setOwner');
    var _params = _f.encodeCall(<dynamic>[newOwner]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> reclaimToken(EthereumAddress token, Credentials privateKey,
      TransactionNotPayable tx) async {
    var _f = $contract.function('reclaimToken');
    var _params = _f.encodeCall(<dynamic>[token]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> deprecateBBFarm(BigInt bbFarmId, EthereumAddress _bbFarm,
      Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $contract.function('deprecateBBFarm');
    var _params = _f.encodeCall(<dynamic>[bbFarmId, _bbFarm]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> dSetCommunityBallotsEnabled(Uint8List democHash, bool enabled,
      Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $contract.function('dSetCommunityBallotsEnabled');
    var _params = _f.encodeCall(<dynamic>[democHash, enabled]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> dAddCategory(
      Uint8List democHash,
      Uint8List catName,
      bool hasParent,
      BigInt parent,
      Credentials privateKey,
      TransactionNotPayable tx) async {
    var _f = $contract.function('dAddCategory');
    var _params =
        _f.encodeCall(<dynamic>[democHash, catName, hasParent, parent]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> dDeployBallot(
      Uint8List democHash,
      Uint8List specHash,
      Uint8List extraData,
      BigInt packed,
      Credentials privateKey,
      TransactionPayable tx) async {
    var _f = $contract.function('dDeployBallot');
    var _params =
        _f.encodeCall(<dynamic>[democHash, specHash, extraData, packed]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> doUpgrade(EthereumAddress nextSC, Credentials privateKey,
      TransactionNotPayable tx) async {
    var _f = $contract.function('doUpgrade');
    var _params = _f.encodeCall(<dynamic>[nextSC]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> setDNoEditors(Uint8List democHash, Credentials privateKey,
      TransactionNotPayable tx) async {
    var _f = $contract.function('setDNoEditors');
    var _params = _f.encodeCall(<dynamic>[democHash]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> payoutAll(
      Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $contract.function('payoutAll');
    var _params = _f.encodeCall(<dynamic>[]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> addBBFarm(EthereumAddress bbFarm, Credentials privateKey,
      TransactionNotPayable tx) async {
    var _f = $contract.function('addBBFarm');
    var _params = _f.encodeCall(<dynamic>[bbFarm]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<EthereumAddress> getBackend({EthereumAddress from}) async {
    var _f = $contract.function('getBackend');
    var _params = <dynamic>[];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as EthereumAddress;
  }

  Future<EthereumAddress> ensOwnerPx({EthereumAddress from}) async {
    var _f = $contract.function('ensOwnerPx');
    var _params = <dynamic>[];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as EthereumAddress;
  }

  Future<String> dDisableErc20OwnerClaim(Uint8List democHash,
      Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $contract.function('dDisableErc20OwnerClaim');
    var _params = _f.encodeCall(<dynamic>[democHash]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<EthereumAddress> owner({EthereumAddress from}) async {
    var _f = $contract.function('owner');
    var _params = <dynamic>[];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as EthereumAddress;
  }

  Future<String> dDowngradeToBasic(Uint8List democHash, Credentials privateKey,
      TransactionNotPayable tx) async {
    var _f = $contract.function('dDowngradeToBasic');
    var _params = _f.encodeCall(<dynamic>[democHash]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> dSetArbitraryData(Uint8List democHash, Uint8List key,
      Uint8List value, Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $contract.function('dSetArbitraryData');
    var _params = _f.encodeCall(<dynamic>[democHash, key, value]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> dOwnerErc20Claim(Uint8List democHash, Credentials privateKey,
      TransactionNotPayable tx) async {
    var _f = $contract.function('dOwnerErc20Claim');
    var _params = _f.encodeCall(<dynamic>[democHash]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> setABackend(Uint8List toSet, EthereumAddress newSC,
      Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $contract.function('setABackend');
    var _params = _f.encodeCall(<dynamic>[toSet, newSC]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<EthereumAddress> getUpgradePointer({EthereumAddress from}) async {
    var _f = $contract.function('getUpgradePointer');
    var _params = <dynamic>[];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as EthereumAddress;
  }

  Future<String> dDeployCommunityBallot(
      Uint8List democHash,
      Uint8List specHash,
      Uint8List extraData,
      BigInt packedTimes,
      Credentials privateKey,
      TransactionPayable tx) async {
    var _f = $contract.function('dDeployCommunityBallot');
    var _params =
        _f.encodeCall(<dynamic>[democHash, specHash, extraData, packedTimes]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<EthereumAddress> getPayments({EthereumAddress from}) async {
    var _f = $contract.function('getPayments');
    var _params = <dynamic>[];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as EthereumAddress;
  }

  Future<BigInt> getBBFarmID(Uint8List bbNamespace,
      {EthereumAddress from}) async {
    var _f = $contract.function('getBBFarmID');
    var _params = <dynamic>[bbNamespace];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as BigInt;
  }

  Future<String> setDOwner(Uint8List democHash, EthereumAddress newOwner,
      Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $contract.function('setDOwner');
    var _params = _f.encodeCall(<dynamic>[democHash, newOwner]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> dAddBallot(Uint8List democHash, BigInt ballotId, BigInt packed,
      Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $contract.function('dAddBallot');
    var _params = _f.encodeCall(<dynamic>[democHash, ballotId, packed]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> dUpgradeToPremium(Uint8List democHash, Credentials privateKey,
      TransactionNotPayable tx) async {
    var _f = $contract.function('dUpgradeToPremium');
    var _params = _f.encodeCall(<dynamic>[democHash]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> dInit(
      EthereumAddress defaultErc20,
      bool disableErc20OwnerClaim,
      Credentials privateKey,
      TransactionPayable tx) async {
    var _f = $contract.function('dInit');
    var _params =
        _f.encodeCall(<dynamic>[defaultErc20, disableErc20OwnerClaim]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<EthereumAddress> getCommAuction({EthereumAddress from}) async {
    var _f = $contract.function('getCommAuction');
    var _params = <dynamic>[];
    var result = await $client.call(
        sender: _addrOrDefault(from),
        contract: $contract,
        function: _f,
        params: _params,
        atBlock: BlockNum.current());
    return result[0] as EthereumAddress;
  }

  Future<String> setDErc20(Uint8List democHash, EthereumAddress newErc20,
      Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $contract.function('setDErc20');
    var _params = _f.encodeCall(<dynamic>[democHash, newErc20]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> setDEditor(Uint8List democHash, EthereumAddress editor,
      bool canEdit, Credentials privateKey, TransactionNotPayable tx) async {
    var _f = $contract.function('setDEditor');
    var _params = _f.encodeCall(<dynamic>[democHash, editor, canEdit]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }

  Future<String> $constructor(
      EthereumAddress _b,
      EthereumAddress _pay,
      EthereumAddress _ensOwnerPx,
      EthereumAddress _bbFarm0,
      EthereumAddress _commAuction,
      Credentials privateKey,
      TransactionNotPayable tx) async {
    var _f = $abi.functions.where((f) => f.name == '' && f.isConstructor).first;
    var _params =
        _f.encodeCall(<dynamic>[_b, _pay, _ensOwnerPx, _bbFarm0, _commAuction]);
    var finalized = tx.finalize(
        data: _params,
        from: await privateKey.extractAddress(),
        to: $contract.address);
    var txid = await $client.sendTransaction(privateKey, finalized,
        fetchChainIdFromNetworkId: true);
    return txid;
  }
}
